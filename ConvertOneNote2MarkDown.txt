<#
  ##############################################
  NO longer used, stuff below is todo
  ##############################################
#>

<#
function RenameImages {
  <#
    Rename images to have unique names  - NoteName-Image#-HHmmssff.xyz
  #>
  param (
    [string]$MdPath,
    [string]$MediaPath,
    [string]$PageName,
    [string]$LevelsPrefix
  )
  try {
    $timeStamp = (Get-Date -Format HHmmssff).ToString()
    $timeStamp = $timeStamp.replace(':', '')
    $images = Get-ChildItem -Path "$($MediaPath)/media" -Include "*.png", "*.gif", "*.jpg", "*.jpeg" -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.Name.SubString(0, 5) -match "image" }
    foreach ($image in $images) {
      $newimageName = "$($PageName.SubString(0,[math]::min(30,$PageName.length)))-$($image.BaseName)-$($timeStamp)$($image.Extension)"
      Rename-Item -Path "$($image.FullName)" -NewName $newimageName -ErrorAction SilentlyContinue
      ((Get-Content -path $MdPath  -Raw).Replace("$($image.Name)", "$($newimageName)")) | Set-Content -Path $MdPath
    }
    # Change MD file Image Path References in Markdown
    ((Get-Content -path $MdPath  -Raw).Replace("$($MediaPath.Replace("\","\\"))", "$($LevelsPrefix)")) | Set-Content -Path $MdPath
    # Change MD file Image Path References in HTML
    ((Get-Content -path $MdPath  -Raw).Replace("$($MediaPath)", "$($LevelsPrefix)")) | Set-Content -Path $MdPath
  }
  catch {
    Write-Host $Error -ForegroundColor Red
    Exit
  }
}

function ClearSpacesInPage {
  <#
    Clear double spaces from bullets and nonbreaking spaces from blank lines
  #>
  Param (
    [string]$MdPath,
    [bool]$ClearSpaces

  )
  if ($ClearSpaces -eq $false) {
    try {
      ((Get-Content -Path $MdPath -Raw -encoding utf8).Replace(">", "").Replace("<", "").Replace([char]0x00A0, [char]0x000A).Replace([char]0x000A, [char]0x000A).Replace("`r`n`r`n", "`r`n")) | Set-Content -Path  $MdPath
    }
    catch {
      Write-Host "Error while clearing double spaces from file" $MdPath " : $($Error[0].ToString())" -ForegroundColor Red
    }
  }
}

function AddYamlToPage {
  Param(
    [string]$MdPath,
    [System.Xml.XmlElement]$Page
  )
  $orig = Get-Content -path $MdPath
  $orig[0] = "# $($Page.name)"
  $insert1 = "$($Page.dateTime)"
  $insert1 = [Datetime]::ParseExact($insert1, 'yyyy-MM-ddTHH:mm:ss.fffZ', $null)
  $insert1 = $insert1.ToString("yyyy-MM-dd HH:mm:ss
        ")
  $insert2 = "---"
  Set-Content -Path $MdPath -Value $orig[0..0], $insert1, $insert2, $orig[6..$orig.Length]
}

function ProcessPageFileObjects {
  Param(
    [string]$PageId,
    [System.Xml.XmlElement]$Page,
    [string]$MediaPath,
    [string]$MdPath
  )
  $files = Get-OneNotePageInsertedFileObjects -PageId $pageId -Page $Page
  foreach ($file in $files) {
    $destfilename = ""
    $path = "$($MediaPath)\media"
    New-Dir -Path $path
    try {
      $destfilename = $file.InsertedFile.preferredName | Remove-InvalidFileNameCharsInsertedFiles
      Copy-Item -Path "$($file.InsertedFile.pathCache)" -Destination "$($path)\$($destfilename)" -Force
    }
    catch {
      Write-Host "Error while copying file object '$($file.InsertedFile.preferredName)' for page '$($Page.name)': $($Error[0].ToString())" -ForegroundColor Red
    }
    # Change MD file Object Name References
    try {
      $pageinsertedfile2 = $destfilename.Replace("$", "\$").Replace("^", "\^").Replace("'", "\'")
      ReplaceStringInFile -File $MdPath -StringToBeReplaced "$($pageinsertedfile2)" -StringThatWillReplaceIt "[$($destfilename)]($($path)/$($destfilename))"
    }
    catch {
      Write-Host "Error while renaming file object name references to '$($file.InsertedFile.preferredName)' for file '$($page.name)': $($Error[0].ToString())" -ForegroundColor Red
    }
  }
}


function Export-OneNotePageCollection {
  <#
    Process pagecollections in sections
  #>
  param(
    [Object]$Config,
    [System.Array]$PageCollection,
    [String]$Path,
    [Int]$Level
  )
  try {
    $enrichedPageCollection = Get-OneNoteEnrichPageCollection -PageCollection $pageCollection
    foreach ($page in $enrichedPageCollection) {
      Write-Host " --------------- PAGE ------------------------ "
      $page

      $paths = Get-OneNoteExportPaths -Config $config -Page $page
      $paths


      Invoke-OneNotePublishPageToWord -PageId ($page.ID) -DocumentPath $paths.DocxPath -Overwrite $true


      $levelsprefix = "../" * ($levelsfromroot) + ".."
      if ($Config.CentralMediaFolder -eq $true) {
        $mediaPath = $fullexportdirpath
        $levelsprefix = ""
      }
      else {
        $mediaPath = $NotebookFilePath
      }



      Invoke-ConvertDocxToMd -OutputFormat $converter -Inputfile $wordDocumentPath -OutputFile "$fullfilepathwithoutextension.md" -MediaPath $mediaPath
      ProcessPageFileObjects -PageId $page.ID -Page $_ -MediaPath $MediaPath -MdPath $mdDocumentPath
      AddYamlToPage -MdPath $mdDocumentPath -Page $_
      ClearSpacesInPage -MdPath $mdDocumentPath -ClearSpaces $true # todo replace with variable
      RenameImages -MdPath $mdDocumentPath -MediaPath $MediaPath -PageName $pagename -LevelsPrefix $levelsprefix
      if ($config.ClearEscape) {
        ReplaceStringInFile -File $wordDocumentPath -StringToBeReplaced "\" -StringThatWillReplaceIt ""
      }
      if ($Config.KeepWordFiles -eq $false) {
        Remove-File -File $wordDocumentPath
      }

    }
  }
  catch {
    Write-Host $Error -ForegroundColor Red
    Exit
  }
}
#>